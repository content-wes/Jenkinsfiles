#!groovy
JOB_TEMPLATE = "PCF OUTREACH PUSH"
ARTIFACTORY_BASE = 'https://artifacts.west.com/artifactory'
REGRESSION_SUITE_JOB='https://build.west.com/job/Customer-Experience/job/cxmo-outreach-regression-suite/job'
def SPARK_ROOMS = [ ]
SPARK_NOTIFY_DEV  = [spaceId: 'd87b3e80-2032-11e9-bf19-5da6656e5408', spaceName: 'CXMO Deploy Dev']
SPARK_NOTIFY_TEST = [spaceId: '33706c60-2002-11e9-8caf-f5ea15b160e7', spaceName: 'CXMO Deploy Test']
SPARK_NOTIFY_STG  = [spaceId: '33706c60-2002-11e9-8caf-f5ea15b160e7', spaceName: 'CXMO Deploy Test']
SPARK_NOTIFY_PROD = [spaceId: '33706c60-2002-11e9-8caf-f5ea15b160e7', spaceName: 'CXMO Deploy Test']
SPARK_CREDENTIAL_ID = 'spark-CXMO-Jenkins-Bot-token'
DEFAULT_EMAIL = ''
DEFAULT_MVN_GROUPID = 'com.west.cxm'
ORG_NAME     = 'CXMO'
ORG_NAME_GCP = 'CXMOoutreach'
API_ENDPOINT_DEV     = 'api.sys.pcfdev.one.west.com'
API_ENDPOINT_DEV_GCP = 'api.sys.devtest-us-central1.pcf.gcp.west.com'
API_ENDPOINT_OPS     = 'api.sys.den06.pcf.one.west.com'
DEV_SPACE  = 'Dev'
TEST_SPACE = 'Test'
STG_SPACE  = 'Stage'
PROD_SPACE = 'Production'

pcf_deploy_org = ''
pcf_deploy_space = ''
pcf_api_endpoint = ''
pcf_domain = ''
app_version = ''
app_links = ''
run_tests_link = ''

pipeline {
    agent {
        label 'RHEL7'
    }
    tools {
        jdk 'openjdk-1.8'
    }
    environment {
        JAVA_HOME="${tool 'openjdk-1.8'}"
        PATH="${JAVA_HOME}/bin:${PATH}"
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:'5'))
    }
    parameters {
        choice(name: 'pcf_deploy_target', choices: ['GCP-Dev','GCP-Test','Dev','Test','Stage','Production'], description: 'PCF Deployment Target')
        choice(name: 'blue_green_route', choices: ['1','2','3','4'], description: '1- Deletes old app; 2 - Leaves old app, but removes its routes; 3 - Leaves old app, adds temp route to new app; 4 - Routes 50% to old and new app')
        string(name: 'app_name', defaultValue: '', description: 'OPTIONAL: Setting a value here will override the default behavior which uses the MVN_ARTIFACTID for the PCF application name.')
        string(name: 'artifact_location', defaultValue: '', description: 'OPTIONAL: Setting a value here will override the default behavior which is to derive an URL based on the MVN_* parameters.')
        string(name: 'manifest_file_location', defaultValue: '', description: 'OPTIONAL: Setting a value here will override the default behavior which is to derive an URL based on the MVN_* parameters.')
        string(name: 'MVN_GROUPID', defaultValue: "${DEFAULT_MVN_GROUPID}", description: 'Maven Group ID of the deployable artifact')
        string(name: 'MVN_ARTIFACTID', defaultValue: '', description: 'Maven Artifact ID -- also used as default app_name')
        string(name: 'MVN_VERSION', defaultValue: '', description: 'Maven Version of the deployable artifact')
        string(name: 'EMAIL_NOTIFICATION', defaultValue: "${DEFAULT_EMAIL}", description: 'OPTIONAL: Send an email report somewhere when this job completes.')
        string(name: 'sso_passcode', defaultValue: '', description: 'OPTIONAL: Required for deployments to Stage or Production.')
    }
    stages {
        stage ('Check Parameters') {
            steps {
                script {
                    if ( app_name == '' ) {
                        app_name = MVN_ARTIFACTID
                    }
                    if (MVN_VERSION.contains('SNAPSHOT')) {
                        MVN_REPO = 'libs-snapshot'
                    } else {
                        MVN_REPO = 'libs-release'
                    }
                    REPO_SUB_DIR = MVN_GROUPID.replaceAll(/\./,'/')
                    if ( artifact_location == '' ) {
                        artifact_location = "${ARTIFACTORY_BASE}/${MVN_REPO}/${REPO_SUB_DIR}/${MVN_ARTIFACTID}/${MVN_VERSION}/${MVN_ARTIFACTID}-${MVN_VERSION}.jar"
                    }
                    if ( manifest_file_location == '' ) {
                        manifest_file_location = "${ARTIFACTORY_BASE}/${MVN_REPO}/${REPO_SUB_DIR}/${MVN_ARTIFACTID}/${MVN_VERSION}/${MVN_ARTIFACTID}-${MVN_VERSION}-manifest.yml"
                    }
                    if (MVN_VERSION == '') {
                        app_version = artifact_location.tokenize('/').last().replace('.jar', '').replace("${app_name}-", '')
                    } else {
                        app_version = MVN_VERSION
                    }


                    if (params.pcf_deploy_target == 'Dev') {
                       pcf_api_endpoint = API_ENDPOINT_DEV
                       pcf_domain = 'app.pcfdev.one.west.com'
                       pcf_deploy_space = DEV_SPACE
                       pcf_deploy_org = ORG_NAME
                       SPARK_ROOMS.add(SPARK_NOTIFY_DEV)

                    } else if (params.pcf_deploy_target == 'Test') {
                       pcf_api_endpoint = API_ENDPOINT_DEV
                       pcf_domain = 'app.pcftest.one.west.com'
                       pcf_deploy_space = TEST_SPACE
                       pcf_deploy_org = ORG_NAME
                       SPARK_ROOMS.add(SPARK_NOTIFY_TEST)

                    } else if (params.pcf_deploy_target == 'GCP-Dev') {
                       pcf_api_endpoint = API_ENDPOINT_DEV_GCP
                       pcf_domain = 'cfapps.dev-us-central1.pcf.gcp.west.com'
                       pcf_deploy_space = DEV_SPACE
                       pcf_deploy_org = ORG_NAME_GCP
                       SPARK_ROOMS.add(SPARK_NOTIFY_DEV)

                    } else if (params.pcf_deploy_target == 'GCP-Test') {
                       pcf_api_endpoint = API_ENDPOINT_DEV_GCP
                       pcf_domain = 'cfapps.test-us-central1.pcf.gcp.west.com'
                       pcf_deploy_space = TEST_SPACE
                       pcf_deploy_org = ORG_NAME_GCP
                       SPARK_ROOMS.add(SPARK_NOTIFY_TEST)

                    } else if (params.pcf_deploy_target == 'Stage') {
                       pcf_api_endpoint = API_ENDPOINT_OPS
                       pcf_domain = 'app.pcfstage.one.west.com'
                       pcf_deploy_space = STG_SPACE
                       pcf_deploy_org = ORG_NAME_GCP
                       SPARK_ROOMS.add(SPARK_NOTIFY_STG)
                       requireSSO(sso_passcode)

                    } else if (params.pcf_deploy_target == 'Production') {
                       pcf_api_endpoint = API_ENDPOINT_OPS
                       pcf_domain = 'app.pcf.one.west.com'
                       pcf_deploy_space = PROD_SPACE
                       pcf_deploy_org = ORG_NAME_GCP
                       SPARK_ROOMS.add(SPARK_NOTIFY_PROD)
                       requireSSO(sso_passcode)

                    } 
                }
            }
        }
       stage ('PCF Deploy') {
            when {
                expression { app_name != '' }
            }
            steps {
                script {
                    currentBuild.description = "${app_name}:${app_version} to ${params.pcf_deploy_target}"
                    echo "${app_name}"
                    echo "${artifact_location}"
                    echo "${manifest_file_location}"
                    app_links = """
App Name: <b>${app_name}</b><br>
Version: ${app_version}<br>
${app_name} artifacts:<br/>
${artifact_location}<br/>
${manifest_file_location}<br/>
<br/><br/>
${app_name} links:<br/>
https://${app_name}.${pcf_domain}/actuator/info <br/>
https://${app_name}.${pcf_domain}/swagger-ui.html <br/>
"""
                    ansibleTower(
                        towerServer: 'tower',
                        templateType: 'job',
                        extraVars: "{'app_name': '${app_name}', 'org': '${pcf_deploy_org}', 'space': '${pcf_deploy_space}', 'artifact_location': '${artifact_location}', 'manifest_file_location': '${manifest_file_location}', 'blue_green_route': '${blue_green_route}', 'api_endpoint': '${pcf_api_endpoint}', 'pcf_domain': '${pcf_domain}', 'sso_passcode': '${sso_passcode}'}",
                        jobTemplate: "${JOB_TEMPLATE}",
                        importTowerLogs: true,
                        inventory: "",
                        jobTags: "",
                        limit: "",
                        removeColor: false,
                        verbose: true,
                        credential: "",
                    )
                    run_tests_link = "<a href='${REGRESSION_SUITE_JOB}/${params.pcf_deploy_target}/build?delay=0sec'>Run Regression Suite</a><br/>"
                }
            }
        }
    }
    post {
        always {
            script {
                datetime = sh (script: "echo \$(date +'%Y-%m-%d @ %H:%M:%S')", returnStdout: true).trim()
                if (app_name != '') {
                    htmlReport = """
---  ${datetime}  ---</br>
<b>Jenkins Deploy Job</b></br>
<b><a href='${env.JOB_URL}'>${env.JOB_NAME}</a></b></br>
Job ${env.BUILD_DISPLAY_NAME} ran for ${currentBuild.duration} ms on node ${env.NODE_NAME}[${env.EXECUTOR_NUMBER}] with labels (${env.NODE_LABELS})
<p>
Tower Job Template: ${JOB_TEMPLATE}<br>
Blue/Green Route: ${blue_green_route}<br/>
PCF Space: <b>${params.pcf_deploy_target}</b><br>
Result: <a href='${env.BUILD_URL}'><b>${currentBuild.currentResult}</b></a><br/><br/>
${run_tests_link}
${app_links}
<hr>
"""
                    sparkSend credentialsId: SPARK_CREDENTIAL_ID, messageType: 'html',
                        message: htmlReport,
                        spaceList: SPARK_ROOMS
                    echo sh(returnStdout: true, script: 'env | sort')
                    emailext to: "${EMAIL_NOTIFICATION}", 
                        recipientProviders:  [requestor()],
                        subject: "PCF Deploy ${pcf_deploy_target} ${currentBuild.currentResult} ${app_name} ${app_version}", 
                        body: htmlReport,
                        mimeType: 'text/html',
                        attachLog: true
                }
            }
        }
    }
}
void requireSSO(val) {
    if (val==null || val=='') {
        currentBuild.result = 'ABORTED'
        error('sso_passcode is required for the selected deployment target')
    }
}
